// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/pb/pool_transactions.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PoolTransactionsService_CreatePool_FullMethodName             = "/pooltransactions.PoolTransactionsService/CreatePool"
	PoolTransactionsService_CreatePoolInvitation_FullMethodName   = "/pooltransactions.PoolTransactionsService/CreatePoolInvitation"
	PoolTransactionsService_CreatePoolParticipant_FullMethodName  = "/pooltransactions.PoolTransactionsService/CreatePoolParticipant"
	PoolTransactionsService_DeletePool_FullMethodName             = "/pooltransactions.PoolTransactionsService/DeletePool"
	PoolTransactionsService_GetUserPools_FullMethodName           = "/pooltransactions.PoolTransactionsService/GetUserPools"
	PoolTransactionsService_GetPool_FullMethodName                = "/pooltransactions.PoolTransactionsService/GetPool"
	PoolTransactionsService_RemovePoolParticipant_FullMethodName  = "/pooltransactions.PoolTransactionsService/RemovePoolParticipant"
	PoolTransactionsService_UpdatePool_FullMethodName             = "/pooltransactions.PoolTransactionsService/UpdatePool"
	PoolTransactionsService_GetPoolBalance_FullMethodName         = "/pooltransactions.PoolTransactionsService/GetPoolBalance"
	PoolTransactionsService_GetPoolOverview_FullMethodName        = "/pooltransactions.PoolTransactionsService/GetPoolOverview"
	PoolTransactionsService_SendPaymentToUser_FullMethodName      = "/pooltransactions.PoolTransactionsService/SendPaymentToUser"
	PoolTransactionsService_SendPaymentToPool_FullMethodName      = "/pooltransactions.PoolTransactionsService/SendPaymentToPool"
	PoolTransactionsService_GetUserAccountOverview_FullMethodName = "/pooltransactions.PoolTransactionsService/GetUserAccountOverview"
	PoolTransactionsService_GetUserBalance_FullMethodName         = "/pooltransactions.PoolTransactionsService/GetUserBalance"
	PoolTransactionsService_IsUserOwnerOfPool_FullMethodName      = "/pooltransactions.PoolTransactionsService/IsUserOwnerOfPool"
)

// PoolTransactionsServiceClient is the client API for PoolTransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoolTransactionsServiceClient interface {
	// Pools
	CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolResponse, error)
	CreatePoolInvitation(ctx context.Context, in *CreatePoolInvitationRequest, opts ...grpc.CallOption) (*CreatePoolInvitationResponse, error)
	CreatePoolParticipant(ctx context.Context, in *CreatePoolParticipantRequest, opts ...grpc.CallOption) (*CreatePoolParticipantResponse, error)
	DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*DeletePoolResponse, error)
	GetUserPools(ctx context.Context, in *GetUserPoolsRequest, opts ...grpc.CallOption) (*GetUserPoolsResponse, error)
	GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error)
	RemovePoolParticipant(ctx context.Context, in *RemovePoolParticipantRequest, opts ...grpc.CallOption) (*RemovePoolParticipantResponse, error)
	UpdatePool(ctx context.Context, in *UpdatePoolRequest, opts ...grpc.CallOption) (*UpdatePoolResponse, error)
	GetPoolBalance(ctx context.Context, in *GetPoolBalanceRequest, opts ...grpc.CallOption) (*GetPoolBalanceResponse, error)
	GetPoolOverview(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error)
	// Transactions
	SendPaymentToUser(ctx context.Context, in *SendPaymentToUserRequest, opts ...grpc.CallOption) (*SendPaymentToUserResponse, error)
	SendPaymentToPool(ctx context.Context, in *SendPaymentToPoolRequest, opts ...grpc.CallOption) (*SendPaymentToPoolResponse, error)
	GetUserAccountOverview(ctx context.Context, in *GetUserAccountOverviewRequest, opts ...grpc.CallOption) (*GetUserAccountOverviewResponse, error)
	GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error)
	IsUserOwnerOfPool(ctx context.Context, in *IsUserOwnerOfPoolRequest, opts ...grpc.CallOption) (*IsUserOwnerOfPoolResponse, error)
}

type poolTransactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPoolTransactionsServiceClient(cc grpc.ClientConnInterface) PoolTransactionsServiceClient {
	return &poolTransactionsServiceClient{cc}
}

func (c *poolTransactionsServiceClient) CreatePool(ctx context.Context, in *CreatePoolRequest, opts ...grpc.CallOption) (*CreatePoolResponse, error) {
	out := new(CreatePoolResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_CreatePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) CreatePoolInvitation(ctx context.Context, in *CreatePoolInvitationRequest, opts ...grpc.CallOption) (*CreatePoolInvitationResponse, error) {
	out := new(CreatePoolInvitationResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_CreatePoolInvitation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) CreatePoolParticipant(ctx context.Context, in *CreatePoolParticipantRequest, opts ...grpc.CallOption) (*CreatePoolParticipantResponse, error) {
	out := new(CreatePoolParticipantResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_CreatePoolParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) DeletePool(ctx context.Context, in *DeletePoolRequest, opts ...grpc.CallOption) (*DeletePoolResponse, error) {
	out := new(DeletePoolResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_DeletePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) GetUserPools(ctx context.Context, in *GetUserPoolsRequest, opts ...grpc.CallOption) (*GetUserPoolsResponse, error) {
	out := new(GetUserPoolsResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_GetUserPools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error) {
	out := new(GetPoolResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_GetPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) RemovePoolParticipant(ctx context.Context, in *RemovePoolParticipantRequest, opts ...grpc.CallOption) (*RemovePoolParticipantResponse, error) {
	out := new(RemovePoolParticipantResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_RemovePoolParticipant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) UpdatePool(ctx context.Context, in *UpdatePoolRequest, opts ...grpc.CallOption) (*UpdatePoolResponse, error) {
	out := new(UpdatePoolResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_UpdatePool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) GetPoolBalance(ctx context.Context, in *GetPoolBalanceRequest, opts ...grpc.CallOption) (*GetPoolBalanceResponse, error) {
	out := new(GetPoolBalanceResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_GetPoolBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) GetPoolOverview(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error) {
	out := new(GetPoolResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_GetPoolOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) SendPaymentToUser(ctx context.Context, in *SendPaymentToUserRequest, opts ...grpc.CallOption) (*SendPaymentToUserResponse, error) {
	out := new(SendPaymentToUserResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_SendPaymentToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) SendPaymentToPool(ctx context.Context, in *SendPaymentToPoolRequest, opts ...grpc.CallOption) (*SendPaymentToPoolResponse, error) {
	out := new(SendPaymentToPoolResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_SendPaymentToPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) GetUserAccountOverview(ctx context.Context, in *GetUserAccountOverviewRequest, opts ...grpc.CallOption) (*GetUserAccountOverviewResponse, error) {
	out := new(GetUserAccountOverviewResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_GetUserAccountOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) GetUserBalance(ctx context.Context, in *GetUserBalanceRequest, opts ...grpc.CallOption) (*GetUserBalanceResponse, error) {
	out := new(GetUserBalanceResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_GetUserBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poolTransactionsServiceClient) IsUserOwnerOfPool(ctx context.Context, in *IsUserOwnerOfPoolRequest, opts ...grpc.CallOption) (*IsUserOwnerOfPoolResponse, error) {
	out := new(IsUserOwnerOfPoolResponse)
	err := c.cc.Invoke(ctx, PoolTransactionsService_IsUserOwnerOfPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoolTransactionsServiceServer is the server API for PoolTransactionsService service.
// All implementations must embed UnimplementedPoolTransactionsServiceServer
// for forward compatibility
type PoolTransactionsServiceServer interface {
	// Pools
	CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolResponse, error)
	CreatePoolInvitation(context.Context, *CreatePoolInvitationRequest) (*CreatePoolInvitationResponse, error)
	CreatePoolParticipant(context.Context, *CreatePoolParticipantRequest) (*CreatePoolParticipantResponse, error)
	DeletePool(context.Context, *DeletePoolRequest) (*DeletePoolResponse, error)
	GetUserPools(context.Context, *GetUserPoolsRequest) (*GetUserPoolsResponse, error)
	GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error)
	RemovePoolParticipant(context.Context, *RemovePoolParticipantRequest) (*RemovePoolParticipantResponse, error)
	UpdatePool(context.Context, *UpdatePoolRequest) (*UpdatePoolResponse, error)
	GetPoolBalance(context.Context, *GetPoolBalanceRequest) (*GetPoolBalanceResponse, error)
	GetPoolOverview(context.Context, *GetPoolRequest) (*GetPoolResponse, error)
	// Transactions
	SendPaymentToUser(context.Context, *SendPaymentToUserRequest) (*SendPaymentToUserResponse, error)
	SendPaymentToPool(context.Context, *SendPaymentToPoolRequest) (*SendPaymentToPoolResponse, error)
	GetUserAccountOverview(context.Context, *GetUserAccountOverviewRequest) (*GetUserAccountOverviewResponse, error)
	GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error)
	IsUserOwnerOfPool(context.Context, *IsUserOwnerOfPoolRequest) (*IsUserOwnerOfPoolResponse, error)
	mustEmbedUnimplementedPoolTransactionsServiceServer()
}

// UnimplementedPoolTransactionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPoolTransactionsServiceServer struct {
}

func (UnimplementedPoolTransactionsServiceServer) CreatePool(context.Context, *CreatePoolRequest) (*CreatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePool not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) CreatePoolInvitation(context.Context, *CreatePoolInvitationRequest) (*CreatePoolInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoolInvitation not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) CreatePoolParticipant(context.Context, *CreatePoolParticipantRequest) (*CreatePoolParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoolParticipant not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) DeletePool(context.Context, *DeletePoolRequest) (*DeletePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePool not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) GetUserPools(context.Context, *GetUserPoolsRequest) (*GetUserPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPools not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) RemovePoolParticipant(context.Context, *RemovePoolParticipantRequest) (*RemovePoolParticipantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePoolParticipant not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) UpdatePool(context.Context, *UpdatePoolRequest) (*UpdatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePool not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) GetPoolBalance(context.Context, *GetPoolBalanceRequest) (*GetPoolBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolBalance not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) GetPoolOverview(context.Context, *GetPoolRequest) (*GetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolOverview not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) SendPaymentToUser(context.Context, *SendPaymentToUserRequest) (*SendPaymentToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPaymentToUser not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) SendPaymentToPool(context.Context, *SendPaymentToPoolRequest) (*SendPaymentToPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPaymentToPool not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) GetUserAccountOverview(context.Context, *GetUserAccountOverviewRequest) (*GetUserAccountOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccountOverview not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) GetUserBalance(context.Context, *GetUserBalanceRequest) (*GetUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBalance not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) IsUserOwnerOfPool(context.Context, *IsUserOwnerOfPoolRequest) (*IsUserOwnerOfPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUserOwnerOfPool not implemented")
}
func (UnimplementedPoolTransactionsServiceServer) mustEmbedUnimplementedPoolTransactionsServiceServer() {
}

// UnsafePoolTransactionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoolTransactionsServiceServer will
// result in compilation errors.
type UnsafePoolTransactionsServiceServer interface {
	mustEmbedUnimplementedPoolTransactionsServiceServer()
}

func RegisterPoolTransactionsServiceServer(s grpc.ServiceRegistrar, srv PoolTransactionsServiceServer) {
	s.RegisterService(&PoolTransactionsService_ServiceDesc, srv)
}

func _PoolTransactionsService_CreatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).CreatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_CreatePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).CreatePool(ctx, req.(*CreatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_CreatePoolInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).CreatePoolInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_CreatePoolInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).CreatePoolInvitation(ctx, req.(*CreatePoolInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_CreatePoolParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).CreatePoolParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_CreatePoolParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).CreatePoolParticipant(ctx, req.(*CreatePoolParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_DeletePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).DeletePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_DeletePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).DeletePool(ctx, req.(*DeletePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_GetUserPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).GetUserPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_GetUserPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).GetUserPools(ctx, req.(*GetUserPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_GetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).GetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_GetPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).GetPool(ctx, req.(*GetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_RemovePoolParticipant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePoolParticipantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).RemovePoolParticipant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_RemovePoolParticipant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).RemovePoolParticipant(ctx, req.(*RemovePoolParticipantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_UpdatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).UpdatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_UpdatePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).UpdatePool(ctx, req.(*UpdatePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_GetPoolBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).GetPoolBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_GetPoolBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).GetPoolBalance(ctx, req.(*GetPoolBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_GetPoolOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).GetPoolOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_GetPoolOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).GetPoolOverview(ctx, req.(*GetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_SendPaymentToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).SendPaymentToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_SendPaymentToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).SendPaymentToUser(ctx, req.(*SendPaymentToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_SendPaymentToPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPaymentToPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).SendPaymentToPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_SendPaymentToPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).SendPaymentToPool(ctx, req.(*SendPaymentToPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_GetUserAccountOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccountOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).GetUserAccountOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_GetUserAccountOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).GetUserAccountOverview(ctx, req.(*GetUserAccountOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_GetUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).GetUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_GetUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).GetUserBalance(ctx, req.(*GetUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoolTransactionsService_IsUserOwnerOfPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUserOwnerOfPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoolTransactionsServiceServer).IsUserOwnerOfPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoolTransactionsService_IsUserOwnerOfPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoolTransactionsServiceServer).IsUserOwnerOfPool(ctx, req.(*IsUserOwnerOfPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PoolTransactionsService_ServiceDesc is the grpc.ServiceDesc for PoolTransactionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoolTransactionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pooltransactions.PoolTransactionsService",
	HandlerType: (*PoolTransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePool",
			Handler:    _PoolTransactionsService_CreatePool_Handler,
		},
		{
			MethodName: "CreatePoolInvitation",
			Handler:    _PoolTransactionsService_CreatePoolInvitation_Handler,
		},
		{
			MethodName: "CreatePoolParticipant",
			Handler:    _PoolTransactionsService_CreatePoolParticipant_Handler,
		},
		{
			MethodName: "DeletePool",
			Handler:    _PoolTransactionsService_DeletePool_Handler,
		},
		{
			MethodName: "GetUserPools",
			Handler:    _PoolTransactionsService_GetUserPools_Handler,
		},
		{
			MethodName: "GetPool",
			Handler:    _PoolTransactionsService_GetPool_Handler,
		},
		{
			MethodName: "RemovePoolParticipant",
			Handler:    _PoolTransactionsService_RemovePoolParticipant_Handler,
		},
		{
			MethodName: "UpdatePool",
			Handler:    _PoolTransactionsService_UpdatePool_Handler,
		},
		{
			MethodName: "GetPoolBalance",
			Handler:    _PoolTransactionsService_GetPoolBalance_Handler,
		},
		{
			MethodName: "GetPoolOverview",
			Handler:    _PoolTransactionsService_GetPoolOverview_Handler,
		},
		{
			MethodName: "SendPaymentToUser",
			Handler:    _PoolTransactionsService_SendPaymentToUser_Handler,
		},
		{
			MethodName: "SendPaymentToPool",
			Handler:    _PoolTransactionsService_SendPaymentToPool_Handler,
		},
		{
			MethodName: "GetUserAccountOverview",
			Handler:    _PoolTransactionsService_GetUserAccountOverview_Handler,
		},
		{
			MethodName: "GetUserBalance",
			Handler:    _PoolTransactionsService_GetUserBalance_Handler,
		},
		{
			MethodName: "IsUserOwnerOfPool",
			Handler:    _PoolTransactionsService_IsUserOwnerOfPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/pool_transactions.proto",
}
