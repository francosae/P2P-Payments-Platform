// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: pkg/pb/user_compliance.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserComplianceService_UpdateUserAccount_FullMethodName      = "/usercompliance.UserComplianceService/UpdateUserAccount"
	UserComplianceService_GetUserAccount_FullMethodName         = "/usercompliance.UserComplianceService/GetUserAccount"
	UserComplianceService_CreateUserAccount_FullMethodName      = "/usercompliance.UserComplianceService/CreateUserAccount"
	UserComplianceService_GetUserPRN_FullMethodName             = "/usercompliance.UserComplianceService/GetUserPRN"
	UserComplianceService_CreatePlaidLinkToken_FullMethodName   = "/usercompliance.UserComplianceService/CreatePlaidLinkToken"
	UserComplianceService_CreatePlaidAccessToken_FullMethodName = "/usercompliance.UserComplianceService/CreatePlaidAccessToken"
)

// UserComplianceServiceClient is the client API for UserComplianceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserComplianceServiceClient interface {
	UpdateUserAccount(ctx context.Context, in *UpdateUserAccountRequest, opts ...grpc.CallOption) (*UpdateUserAccountResponse, error)
	GetUserAccount(ctx context.Context, in *GetUserAccountRequest, opts ...grpc.CallOption) (*GetUserAccountResponse, error)
	CreateUserAccount(ctx context.Context, in *CreateUserAccountRequest, opts ...grpc.CallOption) (*CreateUserAccountResponse, error)
	GetUserPRN(ctx context.Context, in *GetUserPRNRequest, opts ...grpc.CallOption) (*GetUserPRNResponse, error)
	CreatePlaidLinkToken(ctx context.Context, in *CreatePlaidLinkTokenRequest, opts ...grpc.CallOption) (*CreatePlaidLinkTokenResponse, error)
	CreatePlaidAccessToken(ctx context.Context, in *CreatePlaidAccessTokenRequest, opts ...grpc.CallOption) (*CreatePlaidAccessTokenResponse, error)
}

type userComplianceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserComplianceServiceClient(cc grpc.ClientConnInterface) UserComplianceServiceClient {
	return &userComplianceServiceClient{cc}
}

func (c *userComplianceServiceClient) UpdateUserAccount(ctx context.Context, in *UpdateUserAccountRequest, opts ...grpc.CallOption) (*UpdateUserAccountResponse, error) {
	out := new(UpdateUserAccountResponse)
	err := c.cc.Invoke(ctx, UserComplianceService_UpdateUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userComplianceServiceClient) GetUserAccount(ctx context.Context, in *GetUserAccountRequest, opts ...grpc.CallOption) (*GetUserAccountResponse, error) {
	out := new(GetUserAccountResponse)
	err := c.cc.Invoke(ctx, UserComplianceService_GetUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userComplianceServiceClient) CreateUserAccount(ctx context.Context, in *CreateUserAccountRequest, opts ...grpc.CallOption) (*CreateUserAccountResponse, error) {
	out := new(CreateUserAccountResponse)
	err := c.cc.Invoke(ctx, UserComplianceService_CreateUserAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userComplianceServiceClient) GetUserPRN(ctx context.Context, in *GetUserPRNRequest, opts ...grpc.CallOption) (*GetUserPRNResponse, error) {
	out := new(GetUserPRNResponse)
	err := c.cc.Invoke(ctx, UserComplianceService_GetUserPRN_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userComplianceServiceClient) CreatePlaidLinkToken(ctx context.Context, in *CreatePlaidLinkTokenRequest, opts ...grpc.CallOption) (*CreatePlaidLinkTokenResponse, error) {
	out := new(CreatePlaidLinkTokenResponse)
	err := c.cc.Invoke(ctx, UserComplianceService_CreatePlaidLinkToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userComplianceServiceClient) CreatePlaidAccessToken(ctx context.Context, in *CreatePlaidAccessTokenRequest, opts ...grpc.CallOption) (*CreatePlaidAccessTokenResponse, error) {
	out := new(CreatePlaidAccessTokenResponse)
	err := c.cc.Invoke(ctx, UserComplianceService_CreatePlaidAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserComplianceServiceServer is the server API for UserComplianceService service.
// All implementations must embed UnimplementedUserComplianceServiceServer
// for forward compatibility
type UserComplianceServiceServer interface {
	UpdateUserAccount(context.Context, *UpdateUserAccountRequest) (*UpdateUserAccountResponse, error)
	GetUserAccount(context.Context, *GetUserAccountRequest) (*GetUserAccountResponse, error)
	CreateUserAccount(context.Context, *CreateUserAccountRequest) (*CreateUserAccountResponse, error)
	GetUserPRN(context.Context, *GetUserPRNRequest) (*GetUserPRNResponse, error)
	CreatePlaidLinkToken(context.Context, *CreatePlaidLinkTokenRequest) (*CreatePlaidLinkTokenResponse, error)
	CreatePlaidAccessToken(context.Context, *CreatePlaidAccessTokenRequest) (*CreatePlaidAccessTokenResponse, error)
	mustEmbedUnimplementedUserComplianceServiceServer()
}

// UnimplementedUserComplianceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserComplianceServiceServer struct {
}

func (UnimplementedUserComplianceServiceServer) UpdateUserAccount(context.Context, *UpdateUserAccountRequest) (*UpdateUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserAccount not implemented")
}
func (UnimplementedUserComplianceServiceServer) GetUserAccount(context.Context, *GetUserAccountRequest) (*GetUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserAccount not implemented")
}
func (UnimplementedUserComplianceServiceServer) CreateUserAccount(context.Context, *CreateUserAccountRequest) (*CreateUserAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserAccount not implemented")
}
func (UnimplementedUserComplianceServiceServer) GetUserPRN(context.Context, *GetUserPRNRequest) (*GetUserPRNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPRN not implemented")
}
func (UnimplementedUserComplianceServiceServer) CreatePlaidLinkToken(context.Context, *CreatePlaidLinkTokenRequest) (*CreatePlaidLinkTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaidLinkToken not implemented")
}
func (UnimplementedUserComplianceServiceServer) CreatePlaidAccessToken(context.Context, *CreatePlaidAccessTokenRequest) (*CreatePlaidAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaidAccessToken not implemented")
}
func (UnimplementedUserComplianceServiceServer) mustEmbedUnimplementedUserComplianceServiceServer() {}

// UnsafeUserComplianceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserComplianceServiceServer will
// result in compilation errors.
type UnsafeUserComplianceServiceServer interface {
	mustEmbedUnimplementedUserComplianceServiceServer()
}

func RegisterUserComplianceServiceServer(s grpc.ServiceRegistrar, srv UserComplianceServiceServer) {
	s.RegisterService(&UserComplianceService_ServiceDesc, srv)
}

func _UserComplianceService_UpdateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserComplianceServiceServer).UpdateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserComplianceService_UpdateUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserComplianceServiceServer).UpdateUserAccount(ctx, req.(*UpdateUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserComplianceService_GetUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserComplianceServiceServer).GetUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserComplianceService_GetUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserComplianceServiceServer).GetUserAccount(ctx, req.(*GetUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserComplianceService_CreateUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserComplianceServiceServer).CreateUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserComplianceService_CreateUserAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserComplianceServiceServer).CreateUserAccount(ctx, req.(*CreateUserAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserComplianceService_GetUserPRN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPRNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserComplianceServiceServer).GetUserPRN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserComplianceService_GetUserPRN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserComplianceServiceServer).GetUserPRN(ctx, req.(*GetUserPRNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserComplianceService_CreatePlaidLinkToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaidLinkTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserComplianceServiceServer).CreatePlaidLinkToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserComplianceService_CreatePlaidLinkToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserComplianceServiceServer).CreatePlaidLinkToken(ctx, req.(*CreatePlaidLinkTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserComplianceService_CreatePlaidAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaidAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserComplianceServiceServer).CreatePlaidAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserComplianceService_CreatePlaidAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserComplianceServiceServer).CreatePlaidAccessToken(ctx, req.(*CreatePlaidAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserComplianceService_ServiceDesc is the grpc.ServiceDesc for UserComplianceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserComplianceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usercompliance.UserComplianceService",
	HandlerType: (*UserComplianceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserAccount",
			Handler:    _UserComplianceService_UpdateUserAccount_Handler,
		},
		{
			MethodName: "GetUserAccount",
			Handler:    _UserComplianceService_GetUserAccount_Handler,
		},
		{
			MethodName: "CreateUserAccount",
			Handler:    _UserComplianceService_CreateUserAccount_Handler,
		},
		{
			MethodName: "GetUserPRN",
			Handler:    _UserComplianceService_GetUserPRN_Handler,
		},
		{
			MethodName: "CreatePlaidLinkToken",
			Handler:    _UserComplianceService_CreatePlaidLinkToken_Handler,
		},
		{
			MethodName: "CreatePlaidAccessToken",
			Handler:    _UserComplianceService_CreatePlaidAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/user_compliance.proto",
}
